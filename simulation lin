<!doctype html>
<html lang="he" dir="rtl">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>סימולציית קווי שדה חשמלי</title>
<style>
  :root{
    --bg:#ffffff; --panel:#f8fafc; --ink:#111; --muted:#666; --line:#e5e7eb;
    --plus:#4aa4ff; --minus:#ff6b6b;
    --field:#000000;         /* קווי שדה שחורים */
  }
  html,body{height:100%;margin:0;background:var(--bg);color:var(--ink);font-family:Inter,system-ui,Segoe UI,Arial}
  .wrap{height:100%;display:grid;grid-template-rows:auto 1fr}
  .toolbar{display:flex;gap:.5rem;flex-wrap:wrap;align-items:center;background:var(--panel);padding:.6rem .8rem;border-bottom:1px solid var(--line)}
  .btn{border:1px solid var(--line);background:#fff;color:var(--ink);padding:.45rem .7rem;border-radius:.6rem;cursor:pointer}
  .btn.active{outline:2px solid var(--plus)}
  .group{display:flex;gap:.4rem;align-items:center;background:#f1f5f9;border:1px solid var(--line);padding:.35rem .5rem;border-radius:.6rem}
  .label{color:var(--muted);font-size:.92rem}
  input[type=range]{accent-color:var(--plus)}
  #stats{margin-inline-start:auto;color:var(--muted);font-size:.92rem}
  #help{margin-inline-start:.5rem;color:var(--muted);font-size:.92rem}
  canvas{display:block;width:100%;height:100%;background:#ffffff}
</style>
</head>
<body>
<div class="wrap">
  <div class="toolbar">
    <span class="label">מצב הוספה:</span>
    <button class="btn" id="modePlus">+ מטען</button>
    <button class="btn" id="modeMinus">− מטען</button>

    <div class="group">
      <span class="label">עוצמה</span>
      <button class="btn" id="qDown">−</button>
      <span id="qVal">1</span>
      <button class="btn" id="qUp">+</button>
    </div>

    <div class="group">
      <span class="label">צפיפות קווים</span>
      <input type="range" id="seedBase" min="4" max="36" step="2" value="22">
    </div>

    <button class="btn" id="erase">מחק</button>
    <button class="btn" id="clear">ניקוי</button>
    <span id="help">קליק מוסיף מטען · גלילה=זום · Ctrl+גרירה=להזיז מטען</span>
    <span id="stats"></span>
  </div>
  <canvas id="cv"></canvas>
</div>

<script>
(() => {
  const TAU=Math.PI*2;
  const cv=document.getElementById('cv');
  const ctx=cv.getContext('2d',{alpha:false});

  // מצב
  let dpr=1, zoom=1;
  let charges=[];            // {x,y,q}
  let tool='+', qMag=1;
  let seedBase=22;           // עדיין שולט בכמות הזרעים (צפיפות)
  const lineColor=getComputedStyle(document.documentElement).getPropertyValue('--field').trim(); // שחור

  // כלל: אם לאורך המסלול השדה מתאפס → לא מציירים את הקו
  const DISCARD_IF_ZERO = true;

  // נומריקה (כמו שהיה)
  const soft=6, seedR=12, stopNear=8, maxSteps=40000, fieldClip=1e4;
  const minSpeed=1e-6;
  const stepLen=1.6;

  // DOM
  const $=s=>document.querySelector(s);
  const modePlus=$('#modePlus'), modeMinus=$('#modeMinus'), qVal=$('#qVal');
  const seedBaseInput=$('#seedBase'), eraseBtn=$('#erase'), clearBtn=$('#clear'), stats=$('#stats');

  function resize(){
    dpr=Math.max(1,window.devicePixelRatio||1);
    cv.width=Math.floor(innerWidth*dpr);
    const top=document.querySelector('.toolbar').offsetHeight;
    cv.height=Math.floor((innerHeight-top)*dpr);
    cv.style.width=innerWidth+'px';
    cv.style.height=(innerHeight-top)+'px';
    ctx.setTransform(dpr*zoom,0,0,dpr*zoom,0,0);
    draw();
  }
  window.addEventListener('resize',resize);

  function setMode(m){ tool=m; modePlus.classList.toggle('active',m==='+'); modeMinus.classList.toggle('active',m==='-'); }

  // E(x,y)
  function fieldAt(x,y){
    let Ex=0,Ey=0;
    for(const c of charges){
      const dx=x-c.x, dy=y-c.y;
      const r2=dx*dx+dy*dy+soft*soft;
      const inv=1/Math.sqrt(r2), inv3=inv*inv*inv;
      Ex+=c.q*dx*inv3; Ey+=c.q*dy*inv3;
    }
    const m2=Ex*Ex+Ey*Ey;
    if(m2>fieldClip*fieldClip){ const s=fieldClip/Math.sqrt(m2); Ex*=s; Ey*=s; }
    return [Ex,Ey];
  }

  function rk4StepWithZeroCheck(x,y,h,dir=+1){
    const f=(xx,yy)=>{
      const v=fieldAt(xx,yy);
      const m=Math.hypot(v[0],v[1]);
      if(m<minSpeed) return {u:[0,0], zero:true};
      return {u:[dir*v[0]/m, dir*v[1]/m], zero:false};
    };
    const k1=f(x,y);
    const k2=f(x+0.5*h*k1.u[0], y+0.5*h*k1.u[1]);
    const k3=f(x+0.5*h*k2.u[0], y+0.5*h*k2.u[1]);
    const k4=f(x+h*k3.u[0], y+h*k3.u[1]);
    const nx=x+(h/6)*(k1.u[0]+2*k2.u[0]+2*k3.u[0]+k4.u[0]);
    const ny=y+(h/6)*(k1.u[1]+2*k2.u[1]+2*k3.u[1]+k4.u[1]);
    const nearZero=k1.zero||k2.zero||k3.zero||k4.zero;
    return {nx,ny,nearZero};
  }

  function outOfBounds(x,y){ return (x<-20||y<-20||x>cv.width/zoom+20||y>cv.height/zoom+20); }
  function nearAnyCharge(x,y,rad){ for(const c of charges){ if(Math.hypot(x-c.x,y-c.y)<rad) return true; } return false; }

  function drawScene(){
    // רקע לבן
    ctx.fillStyle='#ffffff';
    ctx.fillRect(0,0,cv.width/zoom,cv.height/zoom);

    drawFieldLines(); // קווים שחורים + חצים באמצע (אותו אורך)

    // מטענים
    for(const c of charges){
      const r=7;
      ctx.beginPath();
      ctx.fillStyle = c.q>0? getComputedStyle(document.documentElement).getPropertyValue('--plus').trim()
                            : getComputedStyle(document.documentElement).getPropertyValue('--minus').trim();
      ctx.strokeStyle='#333';
      ctx.lineWidth=1/zoom;
      ctx.arc(c.x,c.y,r,0,TAU);
      ctx.fill(); ctx.stroke();
      ctx.save();
      ctx.fillStyle='#ffffff';
      ctx.font=(11/zoom)+'px system-ui';
      ctx.textAlign='center'; ctx.textBaseline='middle';
      ctx.fillText(c.q>0?'+':'−',c.x,c.y);
      ctx.restore();
    }
  }

  function drawFieldLines(){
    ctx.lineWidth=2.0/zoom;          // מעט עבה יותר על לבן
    ctx.strokeStyle=lineColor;

    // --- סימטריה + רווחים שווים סביב מטען ---
    // זורעים קווים בזוויות שוות (דטרמיניסטי) סביב כל מטען.
    for(const c of charges){
      const seeds=Math.max(4, Math.round(seedBase*Math.abs(c.q))); // ∝ |q|
      for(let k=0;k<seeds;k++){
        const a=(TAU*k)/seeds;                     // זוויות שוות → סימטרי ורווח שווה סביב המטען
        const sx=c.x+seedR*Math.cos(a), sy=c.y+seedR*Math.sin(a);
        drawStreamline(sx,sy);
      }
    }

    function drawStreamline(sx,sy){
      const fwd = integrate(sx,sy,+1);
      const bwd = integrate(sx,sy,-1);

      if(DISCARD_IF_ZERO && (fwd.zeroHit || bwd.zeroHit)) return;

      const pts = bwd.pts.slice().reverse().concat(fwd.pts);
      if(pts.length<2) return;

      // קו שחור
      ctx.beginPath();
      ctx.moveTo(pts[0][0],pts[0][1]);
      for(let i=1;i<pts.length;i++) ctx.lineTo(pts[i][0],pts[i][1]);
      ctx.stroke();

      // חץ באמצע הקו (שחור עם מתאר לבן כדי שייראה על רקע לבן)
      drawArrowAtMiddle(pts);
    }

    function integrate(x0,y0,dir){
      const pts=[[x0,y0]];
      let px=x0, py=y0;
      let zeroHit=false;

      for(let i=0;i<maxSteps;i++){
        const {nx,ny,nearZero}=rk4StepWithZeroCheck(px,py,stepLen,dir);
        pts.push([nx,ny]); px=nx; py=ny;

        if(nearZero){ zeroHit=true; break; }
        if(outOfBounds(px,py)) break;
        if(nearAnyCharge(px,py,stopNear)) break;
      }
      return {pts, zeroHit};
    }

    function drawArrowAtMiddle(pts){
      // אורך כולל
      let L=0, segLen=[];
      for(let i=1;i<pts.length;i++){
        const d=Math.hypot(pts[i][0]-pts[i-1][0], pts[i][1]-pts[i-1][1]);
        segLen.push(d); L+=d;
      }
      if(L<10) return;

      // נקודת אמצע לאורך
      const target=L/2;
      let acc=0;
      for(let i=1;i<pts.length;i++){
        const d=segLen[i-1];
        if(acc+d>=target){
          const t=(target-acc)/d;
          const x=pts[i-1][0]+t*(pts[i][0]-pts[i-1][0]);
          const y=pts[i-1][1]+t*(pts[i][1]-pts[i-1][1]);
          const ang=Math.atan2(pts[i][1]-pts[i-1][1], pts[i][0]-pts[i-1][0]);

          const len=24/zoom, w=14/zoom;
          ctx.save();
          ctx.fillStyle="#000000";     // חץ שחור
          ctx.strokeStyle="#ffffff";   // מתאר לבן דק כדי שיבלוט
          ctx.lineWidth=2/zoom;
          ctx.beginPath();
          ctx.moveTo(x, y);
          ctx.lineTo(x - len*Math.cos(ang) + w*Math.sin(ang),
                     y - len*Math.sin(ang) - w*Math.cos(ang));
          ctx.lineTo(x - len*Math.cos(ang) - w*Math.sin(ang),
                     y - len*Math.sin(ang) + w*Math.cos(ang));
          ctx.closePath();
          ctx.fill();
          ctx.stroke();
          ctx.restore();
          break;
        }
        acc+=d;
      }
    }
  }

  function draw(){
    drawScene();
    stats.textContent=`מטענים: ${charges.length} · צפיפות: ${seedBase} · זום: ${zoom.toFixed(2)}`;
  }

  // הוספה/מחיקה
  function addCharge(x,y,q){ charges.push({x,y,q}); draw(); }
  function removeNearest(x,y){
    if(!charges.length) return;
    let bi=0,bd=Infinity;
    for(let i=0;i<charges.length;i++){
      const c=charges[i];
      const d=(c.x-x)*(c.x-x)+(c.y-y)*(c.y-y);
      if(d<bd){bd=d;bi=i;}
    }
    charges.splice(bi,1); draw();
  }

  function getMouse(e){
    const r=cv.getBoundingClientRect();
    return {x:(e.clientX-r.left)*dpr/(dpr*zoom), y:(e.clientY-r.top)*dpr/(dpr*zoom)};
  }

  // אינטראקציה
  let dragging=null, lastMouse=null;
  cv.addEventListener('pointerdown',e=>{
    const m=getMouse(e);
    if(e.ctrlKey){
      // גרירת מטען קיים
      let bi=-1,bd=12*12;
      for(let i=0;i<charges.length;i++){
        const c=charges[i], d=(c.x-m.x)**2+(c.y-m.y)**2;
        if(d<bd){bd=d;bi=i;}
      }
      if(bi>=0) dragging=bi;
      return;
    }
    const q=(tool==='+')? Math.max(1,qMag) : -Math.max(1,qMag);
    addCharge(m.x,m.y,q);
  });
  cv.addEventListener('pointermove',e=>{
    lastMouse=getMouse(e);
    if(dragging!==null){ charges[dragging].x=lastMouse.x; charges[dragging].y=lastMouse.y; draw(); }
  });
  cv.addEventListener('pointerup',()=>{dragging=null;});
  cv.addEventListener('pointercancel',()=>{dragging=null;});

  // זום
  cv.addEventListener('wheel',e=>{
    e.preventDefault();
    const scale=e.deltaY<0?1.1:1/1.1;
    zoom=Math.max(0.6,Math.min(3.2,zoom*scale));
    ctx.setTransform(dpr*zoom,0,0,dpr*zoom,0,0);
    draw();
  },{passive:false});

  // כפתורים
  modePlus.onclick=()=>setMode('+');
  modeMinus.onclick=()=>setMode('-'); setMode('+');

  qVal.textContent=qMag;
  document.getElementById('qUp').onclick=()=>{ qMag=Math.min(5,qMag+1); qVal.textContent=qMag; };
  document.getElementById('qDown').onclick=()=>{ qMag=Math.max(1,qMag-1); qVal.text_content=qMag; };

  seedBaseInput.oninput=()=>{ seedBase=parseInt(seedBaseInput.value,10); draw(); };

  eraseBtn.onclick=()=>{
    const m=lastMouse||{x:cv.width/(2*zoom),y:cv.height/(2*zoom)};
    removeNearest(m.x,m.y);
  };
  clearBtn.onclick=()=>{ charges.length=0; draw(); };

  // התחלה נקייה
  resize(); draw();
})();
</script>
</body>
</html>
